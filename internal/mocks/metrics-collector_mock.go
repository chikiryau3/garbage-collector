// Code generated by MockGen. DO NOT EDIT.
// Source: ../metricsCollector/metrics-collector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metricscollector "github.com/chikiryau3/garbage-collector/internal/metricsCollector"
	gomock "github.com/golang/mock/gomock"
)

// MetricsCollectorMock is a mock of MetricsCollector interface.
type MetricsCollectorMock struct {
	ctrl     *gomock.Controller
	recorder *MetricsCollectorMockMockRecorder
}

// MetricsCollectorMockMockRecorder is the mock recorder for MetricsCollectorMock.
type MetricsCollectorMockMockRecorder struct {
	mock *MetricsCollectorMock
}

// NewMetricsCollectorMock creates a new mock instance.
func NewMetricsCollectorMock(ctrl *gomock.Controller) *MetricsCollectorMock {
	mock := &MetricsCollectorMock{ctrl: ctrl}
	mock.recorder = &MetricsCollectorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MetricsCollectorMock) EXPECT() *MetricsCollectorMockMockRecorder {
	return m.recorder
}

// GetMetric mocks base method.
func (m *MetricsCollectorMock) GetMetric(name string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", name)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MetricsCollectorMockMockRecorder) GetMetric(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MetricsCollectorMock)(nil).GetMetric), name)
}

// ReadStorage mocks base method.
func (m *MetricsCollectorMock) ReadStorage() (*metricscollector.StorageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStorage")
	ret0, _ := ret[0].(*metricscollector.StorageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStorage indicates an expected call of ReadStorage.
func (mr *MetricsCollectorMockMockRecorder) ReadStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStorage", reflect.TypeOf((*MetricsCollectorMock)(nil).ReadStorage))
}

// SetCount mocks base method.
func (m *MetricsCollectorMock) SetCount(name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCount", name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCount indicates an expected call of SetCount.
func (mr *MetricsCollectorMockMockRecorder) SetCount(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCount", reflect.TypeOf((*MetricsCollectorMock)(nil).SetCount), name, value)
}

// SetGauge mocks base method.
func (m *MetricsCollectorMock) SetGauge(name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MetricsCollectorMockMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MetricsCollectorMock)(nil).SetGauge), name, value)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockStorage) GetData() (*metricscollector.StorageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(*metricscollector.StorageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockStorageMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockStorage)(nil).GetData))
}

// ReadMetric mocks base method.
func (m *MockStorage) ReadMetric(name string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMetric", name)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadMetric indicates an expected call of ReadMetric.
func (mr *MockStorageMockRecorder) ReadMetric(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetric", reflect.TypeOf((*MockStorage)(nil).ReadMetric), name)
}

// RestoreFromDump mocks base method.
func (m *MockStorage) RestoreFromDump() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromDump")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreFromDump indicates an expected call of RestoreFromDump.
func (mr *MockStorageMockRecorder) RestoreFromDump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromDump", reflect.TypeOf((*MockStorage)(nil).RestoreFromDump))
}

// RunStorageDumper mocks base method.
func (m *MockStorage) RunStorageDumper() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunStorageDumper")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// RunStorageDumper indicates an expected call of RunStorageDumper.
func (mr *MockStorageMockRecorder) RunStorageDumper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunStorageDumper", reflect.TypeOf((*MockStorage)(nil).RunStorageDumper))
}

// WriteMetric mocks base method.
func (m *MockStorage) WriteMetric(name string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetric", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMetric indicates an expected call of WriteMetric.
func (mr *MockStorageMockRecorder) WriteMetric(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetric", reflect.TypeOf((*MockStorage)(nil).WriteMetric), name, value)
}
