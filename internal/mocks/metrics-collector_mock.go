// Code generated by MockGen. DO NOT EDIT.
// Source: ../metricsCollector/metrics-collector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	memstorage "github.com/chikiryau3/garbage-collector/internal/memStorage"
	gomock "github.com/golang/mock/gomock"
)

// MetricsCollectorMock is a mock of MetricsCollector interface.
type MetricsCollectorMock struct {
	ctrl     *gomock.Controller
	recorder *MetricsCollectorMockMockRecorder
}

// MetricsCollectorMockMockRecorder is the mock recorder for MetricsCollectorMock.
type MetricsCollectorMockMockRecorder struct {
	mock *MetricsCollectorMock
}

// NewMetricsCollectorMock creates a new mock instance.
func NewMetricsCollectorMock(ctrl *gomock.Controller) *MetricsCollectorMock {
	mock := &MetricsCollectorMock{ctrl: ctrl}
	mock.recorder = &MetricsCollectorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MetricsCollectorMock) EXPECT() *MetricsCollectorMockMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MetricsCollectorMock) Count(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MetricsCollectorMockMockRecorder) Count(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MetricsCollectorMock)(nil).Count), name, value)
}

// Gauge mocks base method.
func (m *MetricsCollectorMock) Gauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MetricsCollectorMockMockRecorder) Gauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MetricsCollectorMock)(nil).Gauge), name, value)
}

// ReadStorage mocks base method.
func (m *MetricsCollectorMock) ReadStorage() (*memstorage.StorageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStorage")
	ret0, _ := ret[0].(*memstorage.StorageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStorage indicates an expected call of ReadStorage.
func (mr *MetricsCollectorMockMockRecorder) ReadStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStorage", reflect.TypeOf((*MetricsCollectorMock)(nil).ReadStorage))
}
