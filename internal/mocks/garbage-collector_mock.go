// Code generated by MockGen. DO NOT EDIT.
// Source: ../clients/garbage-collector/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// GarbageCollectorMock is a mock of Client interface.
type GarbageCollectorMock struct {
	ctrl     *gomock.Controller
	recorder *GarbageCollectorMockMockRecorder
}

// GarbageCollectorMockMockRecorder is the mock recorder for GarbageCollectorMock.
type GarbageCollectorMockMockRecorder struct {
	mock *GarbageCollectorMock
}

// NewGarbageCollectorMock creates a new mock instance.
func NewGarbageCollectorMock(ctrl *gomock.Controller) *GarbageCollectorMock {
	mock := &GarbageCollectorMock{ctrl: ctrl}
	mock.recorder = &GarbageCollectorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GarbageCollectorMock) EXPECT() *GarbageCollectorMockMockRecorder {
	return m.recorder
}

// SendCounter mocks base method.
func (m *GarbageCollectorMock) SendCounter(metricName string, metricValue int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCounter", metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCounter indicates an expected call of SendCounter.
func (mr *GarbageCollectorMockMockRecorder) SendCounter(metricName, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCounter", reflect.TypeOf((*GarbageCollectorMock)(nil).SendCounter), metricName, metricValue)
}

// SendGauge mocks base method.
func (m *GarbageCollectorMock) SendGauge(metricName string, metricValue float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGauge", metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGauge indicates an expected call of SendGauge.
func (mr *GarbageCollectorMockMockRecorder) SendGauge(metricName, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGauge", reflect.TypeOf((*GarbageCollectorMock)(nil).SendGauge), metricName, metricValue)
}
